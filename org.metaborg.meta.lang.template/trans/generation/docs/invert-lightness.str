module generation/docs/invert-lightness

/*
    // Invert lightness of color (note: lightness != brightness/value! L=0 is black, L=1 is white, L=0.5 is color).
    private static java.awt.Color invertLightness(java.awt.Color color) {
        float[] hsl = rgb2hsl(color.getRed() / 255f, color.getGreen() / 255f, color.getBlue() / 255f);
        // Flip lightness using a fancy formula: newL = 0.5 + (1 - L^4) / 4
        float t = hsl[2] * hsl[2], newL = 0.5f + (1 - t * t) / 4f;
        float[] rgb = hsl2rgb(hsl[0], hsl[1], newL);
        return new java.awt.Color(rgb[0], rgb[1], rgb[2]);
    }

    // https://stackoverflow.com/a/54071699
    // input: r,g,b in [0,1], output: h in [0,360) and s,l in [0,1]
    private static float[] rgb2hsl(float r, float g, float b) {
        float a = max(r, g, b), n = a - min(r, g, b), f = (1 - Math.abs(a + a - n - 1));
        float h = n == 0 ? 0 : ((a == r) ? (g - b) / n : ((a == g) ? 2 + (b - r) / n : 4 + (r - g) / n));
        return new float[] { 60 * (h < 0 ? h + 6 : h), f == 0 ? 0 : n / f, (a + a - n) / 2 };
    }

    // https://stackoverflow.com/a/54014428
    // input: h in [0,360] and s,l in [0,1] - output: r,g,b in [0,1]
    private static float[] hsl2rgb(float h, float s, float l) {
        float a = s * min(l, 1 - l);
        float[] c = new float[3];
        for(int i = 0; i < 3; i++) {
            int n = (12 - i * 4) % 12;
            float k = (n + h / 30) % 12;
            c[i] = l - a * max(min(k - 3, 9 - k, 1), -1);
        }
        return c;
    }
*/

rules

//  invert-lightness: (r:int, g:int, b:int) -> (r':int, g':int, b':int)

  invert-lightness: (r, g, b) -> (r', g', b')
    where (h, s, l) := <rgb-to-hsl> (<div> (r, 255), <div> (g, 255), <div> (b, 255))
    ; t := <mul> (l, l)
    ; l' := <add> (0.5, <div> (<subt> (1, <mul> (t, t)), 4))
    ; (r', g', b') := <hsl-to-rgb> (h, s, l')

  rgb-to-hsl: (r, g, b) -> (h', s', l')
    where a := <max> (r, <max> (g, b))
    ; n := <subt> (a, <min> (r, <min> (g, b)))
    ; f := <subt> (1, <abs> (<add> (a, <subt> (<subt> (a, n), 1))))
    ; if <eq> (n, 0.0) then h:= 0.0 else
      if <eq> (a, r) then h:= <div> (<subt> (g, b), n) else
      if <eq> (a, g) then h:= <add> (2, <div> (<subt> (b, r), n))
      else h:= <add> (4, <div> (<subt> (r, g), n))
      end end end
    ; if <lt> (h, 0) then h' := <mul> (60, <add> (h, 6)) else h' := <mul> (60, h) end
    ; if <eq> (f, 0.0) then s' := 0.0 else s' := <div> (n, f) end
    ; l' := <div> (<subt> (<add> (a, a), n), 2)
  
  hsl-to-rgb: (h, s, l) -> (r', g', b')
    where a := <mul> (s, <min> ( l, <subt> (1, l)))
    ; r' := <i-to-ci> (0, h, a, l)
    ; g' := <i-to-ci> (1, h, a, l)
    ; b' := <i-to-ci> (2, h, a, l)
  
  i-to-ci: (i, h, a, l) -> ci
    where n := <div> (<subt> (12, <mul> (i, 4)))
    ; k := <div> (<add> (n, <div> (h, 30)), 12)
    ; ci := <subt> (l, <mul> (a, <max> (<min> (<subt> (k, 3), <min> (<subt> (9, k), 1)), -1)))
