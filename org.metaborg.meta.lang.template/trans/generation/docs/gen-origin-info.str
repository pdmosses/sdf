module generation/docs/gen-origin-info

imports

  libstratego-lib
  
  libspoofax/term/origin
  
    
rules // Multi-file order of origins of definitions or references

  sort-by-origin(|node) = qsort(origin-lt(|node))
  
  origin-lt(|node): (s1, s2) -> ()
    where
      path1 := <direct-path> (<origin-file> node, <origin-file> s1)
    ; path2 := <direct-path> (<origin-file> node, <origin-file> s2)
    ; if <eq> (path1, path2)
      then 
        if <eq> (<origin-line> s1, <origin-line> s2)
        then <lt> (<origin-column> s1, <origin-column> s2)
        else <lt> (<origin-line> s1, <origin-line> s2)
        end
      else
        if <eq> (<dirs-length> path1, <dirs-length> path2)
        then <string-lt> (path1, path2)
        else <lt> (<dirs-length> path1, <dirs-length> path2)
        end
      end
    ; !()

  dirs-length = string-tokenize(|['/']) ; length

rules // Data for modals

  gen-modal-data: (node, nodes) -> l
    where
      files := <map(origin-file); make-set> nodes
    ; l := <map(gen-file-modal-data(|node, nodes))> files

  gen-file-modal-data(|node, nodes): file -> (url, line-columns)
    where
      url := <direct-path; file-url> (<origin-file> node, file)
    ; file-nodes := <filter(where(origin-file; equal(|file)))> nodes
    ; line-columns := <map(line-column)> file-nodes

  line-column: node -> (<origin-line; inc> node, <origin-column; inc> node)

rules // For use by modals.js

  url-modal-data(|node): (url, line-columns) -> $[[url]#[node] line [s]]
     where
       s := <map(line-column-string); separate-by(|", "); concat-strings> line-columns

  line-column-string: (line, column) -> $[[line]_[column]]
  
rules // Tool tips for anchors

  // For each origin-file FILE of nodes: "URL line N1, ..., Nm", separated by "; ",
  // where URL is the url of/in FILE relative to the origin-file of node,
  // and N1, ..., Nm are the origin-lines of nodes whose origin-file is FILE

  // gen-file-info: (node, nodes) -> string
  // where the URLs are file-urls
  gen-file-info = gen-info(gen-file-line-numbers)
  
  // gen-name-info: (node, nodes) -> string
  // where the URLs are name-urls
  gen-name-info = gen-info(gen-name-line-numbers)

  gen-info(s): (node, nodes) -> <string-replace(|"  ", " ")> string
    where 
      files := <map(origin-file); make-set> nodes
    ; string := <map(s(|node, nodes)); separate-by(|"; "); concat-strings> files
  
  gen-file-line-numbers(|node, nodes): file -> <concat-strings> [file-url, " line " | line-numbers]
    where
      file-url := <direct-path> (<origin-file> node, file)
    ; line-numbers := <gen-line-numbers(|nodes)> file

  gen-name-line-numbers(|node, nodes): file -> <concat-strings> [name-url, " line " | line-numbers]
    where
      file-url := <direct-path; file-url> (<origin-file> node, file)
    ; node1 := <getfirst(where(origin-file; equal(|file)))> nodes
    ; (line, column) := (<origin-line; inc> node1, <origin-column; inc> node1)
    ; name-url := $[[file-url]#[node]_[line]_[column]]
    ; line-numbers := <gen-line-numbers(|nodes)> file
  
  gen-line-numbers(|nodes): file -> strings
    where
      file-nodes := <filter(where(origin-file; equal(|file)))> nodes
    ; line-numbers := <map(origin-line; inc); make-set> file-nodes
    ; strings := <map(int-to-string); separate-by(|", ")> line-numbers

rules // Direct path

  // direct-path: (s:string, t:string) -> s:string
  // - eliminates any common prefix of s and t
  // - for each dir in the rest of s, prefixes "../" to the rest of t
  
  direct-path: (source-path, target-path) -> string
    where
      string := 
        <direct-path> (<string-tokenize(|['/'])> source-path, <string-tokenize(|['/'])> target-path)
  
  direct-path: ([], []) -> ""
  
  direct-path: ([x|s*], [x|t*]) -> <direct-path> (s*, t*)
  
  direct-path: ([_|s*], t*) -> <direct-path> (s*, [".."|t*])
  
  direct-path: ([], t*) -> <separate-by(|"/"); concat-strings> t*

  // file-url: string -> string
  // - avoids status 301 redirects reported by the W3C link checker

  file-url: "" -> ""
  file-url: s -> $[[s]/]
