module generation/docs/gen-docs-css

imports
  
  libstratego-lib
  
  libspoofax/core/-
  libspoofax/resource/-
  EditorService

  generation/docs/gen-docs-meta

rules // update styles and scripts

  generate-css: (_, _, ast, path, project-path) -> ()
    with
      meta-language := <get-extension; try(?"stxtest"; !"stx")> path
    ; repo-clone := <local-path; dirname> project-path
    ; repo-name := <base-filename> repo-clone
    ; repo-path := <dirname> repo-clone
    ; meta-language-project-path := $[[repo-path]/[<meta-project-path> meta-language]]
    ; colorer-file := 
        <!$[[meta-language-project-path]/editor/Colorer-CF.esv]; file-exists 
         <+ !$[[meta-language-project-path]/editor/Colorer.esv]>
    ; say(!"\nUpdating styles and scripts ...")
    ; <gen-metaborg-css(true)> (meta-language, meta-language-project-path, repo-clone, repo-name)
    ; <gen-modal-css(true)> (meta-language, meta-language-project-path, repo-clone, repo-name)
    ; <gen-modal-js(true)> (meta-language, meta-language-project-path, repo-clone, repo-name)
    ; <gen-metalanguage-css(true)> (meta-language, colorer-file, repo-clone, repo-name)
    ; say(!"... done")

rules // conditionally update styles and scripts

  gen-metaborg-css(s): (meta-language, meta-language-project-path, repo-clone, repo-name) -> ()
    with
      target-file := $[[repo-clone]/docs/stylesheets/metaborg.css]
    ; if <s> target-file
      then
        metaborg-css-file := $[[meta-language-project-path]/trans/generation/docs/metaborg.css]
      ; <copy-file> (metaborg-css-file, target-file)
      ; say(!$[> [repo-name]/docs/stylesheets/metaborg.css])
      end

  gen-modal-css(s): (meta-language, meta-language-project-path, repo-clone, repo-name) -> ()
    with
      target-file := $[[repo-clone]/docs/stylesheets/modal.css]
    ; if <s> target-file
      then
        modal-css-file := $[[meta-language-project-path]/trans/generation/docs/modal.css]
      ; <copy-file> (modal-css-file, target-file)
      ; say(!$[> [repo-name]/docs/stylesheets/modal.css])
      end

  gen-modal-js(s): (meta-language, meta-language-project-path, repo-clone, repo-name) -> ()
    with
      target-file := $[[repo-clone]/docs/javascripts/modal.js]
    ; if <s> target-file
      then
        modal-css-file := $[[meta-language-project-path]/trans/generation/docs/modal.js]
      ; <copy-file> (modal-css-file, target-file)
      ; say(!$[> [repo-name]/docs/javascripts/modal.js])
      end

  gen-metalanguage-css(s): (meta-language, colorer-file, repo-clone, repo-name) -> ()
    with
      target-file := $[[repo-clone]/docs/stylesheets/[meta-language].css]
    ; if <s> target-file
      then
        css := <parse-file; colorer-to-css(|meta-language)> colorer-file
      ; outs := <fopen> (target-file, "w")
      ; <fputs> (css, outs)
      ; <fclose> outs
      ; say(!$[> [repo-name]/docs/stylesheets/[meta-language].css])
      end

rules // generate highlighting CSS for meta-language from its colorer esv file

  colorer-to-css(|meta-language) =
      collect-om(?ColorRule(_, _))
    ; map(color-rule-to-css-rule(|meta-language))
    ; concat-strings
    ; repeat(string-replace(|"\n  \n", "\n") | 3)
  
  color-rule-to-css-rule(|meta-language):
    ColorRule(kind, Attribute(color, bg-color, font)) ->
    $[[<gen-selector(|meta-language)> kind] {
        [<gen-color> color]
        [<gen-bg-color> bg-color]
        [<gen-font-weight> font]
        [<gen-font-style> font]
      }
      ]

  gen-selector(|meta-language): Token(TK_KEYWORD())    -> $[.[meta-language] .keyword]
  gen-selector(|meta-language): Token(TK_IDENTIFIER()) -> $[.[meta-language] .identifier]
  gen-selector(|meta-language): Token(TK_STRING())     -> $[.[meta-language] .string]
  gen-selector(|meta-language): Token(TK_NUMBER())     -> $[.[meta-language] .number]
  gen-selector(|meta-language): Token(TK_VAR())        -> $[.[meta-language] .var]
  gen-selector(|meta-language): Token(TK_OPERATOR())   -> $[.[meta-language] .operator]
  gen-selector(|meta-language): Token(TK_LAYOUT())     -> $[.[meta-language] .layout]
  
  gen-selector(|meta-language):
    ConstructorOnly(Constructor(c)) -> $[.[meta-language] .cons_[c], .[meta-language] .cons_[c] > * > .token]
  gen-selector(|meta-language):
    Sort(s) -> $[.[meta-language] .sort_[s]]
  gen-selector(|meta-language):
    SortAndConstructor(Sort(s), Constructor(c)) -> $[.[meta-language] .sort_[s].cons_[c]]
  
  gen-color: ColorRGB(r, g, b) -> $[color: rgb([r] [g] [b]);]
  gen-color: ColorDefault()    -> ""
  gen-color: NoColor()         -> ""

  gen-bg-color: ColorRGB(r, g, b) -> $[background-color: rgb([r] [g] [b]);]
  gen-bg-color: ColorDefault()    -> ""
  gen-bg-color: NoColor()         -> ""

  gen-font-weight: BOLD()        -> "font-weight: bold;"
  gen-font-weight: BOLD_ITALIC() -> "font-weight: bold;"
  gen-font-weight: ITALIC()      -> "font-weight: normal;"
  gen-font-weight: NORMAL()      -> "font-weight: normal;"

  gen-font-style: BOLD()        -> "font-style: normal;"
  gen-font-style: BOLD_ITALIC() -> "font-style: italic;"
  gen-font-style: ITALIC()      -> "font-style: italic;"
  gen-font-style: NORMAL()      -> "font-style: normal;"
  