module generation/docs/gen-css

imports
    libspoofax/core/-
    libspoofax/resource/-
    EditorService

rules // generate-css

  generate-css: (_, _, ast, path, project-path) -> ()
    with colorer-file := $[[project-path]/editor/Colorer.esv]
    ; repo-clone := <local-path; dirname> project-path
    ; css-file := $[[repo-clone]/docs/stylesheets/[<language>].css]
    ; say(!css-file)
    ; css := <parse-file; colorer-to-css> colorer-file
    ; outs := <fopen> (css-file, "w")
    ; <fputs> (css, outs)
    ; <fclose> outs
 
  colorer-to-css = collect-om(?ColorRule(_, _))
    ; map(color-rule-to-css-rule)
    ; concat-strings
    ; repeat(string-replace(|"\n  \n", "\n") | 3)
  
  color-rule-to-css-rule:
    ColorRule(kind, Attribute(color, bg-color, font)) ->
    $[.TemplateLang code [<gen-class> kind] {
        [<gen-color> color]
        [<gen-bg-color> bg-color]
        [<gen-font> font]
      }
      ]

  gen-class: Token(TK_KEYWORD())    -> ".keyword"
  gen-class: Token(TK_IDENTIFIER()) -> ".identifier"
  gen-class: Token(TK_STRING())     -> ".string"
  gen-class: Token(TK_NUMBER())     -> ".number"
  gen-class: Token(TK_VAR())        -> ".var"
  gen-class: Token(TK_OPERATOR())   -> ".operator"
  gen-class: Token(TK_LAYOUT())     -> ".layout"
  
  gen-class: ConstructorOnly(Constructor(c))             -> $[.cons_[c]]
  gen-class: Sort(s)                                     -> $[.sort_[s]]
  gen-class: SortAndConstructor(Sort(s), Constructor(c)) -> $[.sort_[s].cons_[c]]
  
  gen-color: ColorRGB(r, g, b) -> $[color: rgb([r] [g] [b]);]
  gen-color: ColorDefault()    -> ""
  gen-color: NoColor()         -> ""

  gen-bg-color: ColorRGB(r, g, b) -> $[background-color: rgb([r] [g] [b]);]
  gen-bg-color: ColorDefault()    -> ""
  gen-bg-color: NoColor()         -> ""

  gen-font: BOLD()   -> "font-weight: bold;"
  gen-font: ITALIC() -> "font-style: italic;"
  gen-font: NORMAL() -> ""
