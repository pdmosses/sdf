module generation/docs/gen-docs-pages

imports

  generation/docs/gen-docs-website
  generation/docs/gen-docs-css
  generation/docs/gen-node-markup
  generation/docs/gen-origin-info
  generation/docs/gen-tokens-markup
  generation/docs/name-binding
  generation/docs/gen-docs-meta
  
  libstratego-lib
  
  libspoofax/analysis/-
  libspoofax/core/-
  libspoofax/resource/-
  libspoofax/term/origin
  
  EditorService

rules // Website

  // generate-website: (_, _, _, _, project-path) -> None()
  // - for use as an action in the Spoofax menu
  // - the extension of the selected file determines the source language
  // - checks the website configuration, styles, and scripts
  // - generates a webpage from each source file in the enclosing project
  
  generate-website: (_, _, _, path, project-path) -> None()
    with
      meta-language := <get-extension; try(?"stxtest"; !"stx")> path
    ; repo-clone := <local-path; dirname> project-path
    ; repo-name := <base-filename> repo-clone
    ; repo-path := <dirname> repo-clone
    ; meta-language-project-path := $[[repo-path]/[<meta-project-path> meta-language]]
    ; colorer-file :=
        <!$[[meta-language-project-path]/editor/Colorer-CF.esv]; file-exists 
         <+ !$[[meta-language-project-path]/editor/Colorer.esv]>
    ; say(!$[
             Generating website [repo-name]/[<base-filename> project-path]: *.[meta-language] ...])
    ; say(!"Checking configuration ...")
    ; <gen-docs(not(file-exists))> (meta-language, repo-clone, repo-name, project-path)
    ; <gen-mkdocs(not(file-exists))> (repo-clone, repo-name)
    ; <gen-ci(not(file-exists))> (meta-language-project-path, repo-clone, repo-name)
    ; say(!"Checking styles and scripts ...")
    ; <gen-metaborg-css(not(file-exists))> (meta-language, meta-language-project-path, repo-clone, repo-name)
    ; <gen-modal-css(not(file-exists))> (meta-language, meta-language-project-path, repo-clone, repo-name)
    ; <gen-modal-js(not(file-exists))> (meta-language, meta-language-project-path, repo-clone, repo-name)
    ; <gen-metalanguage-css(not(file-exists))> (meta-language, colorer-file, repo-clone, repo-name)
    ; say(!"Generating webpages ...")
    ; file-list := <current-language-source-files; filter(where(has-extension(|meta-language)))>
    ; ast-list := <map(analyzed-ast)> file-list
    ; file-ast-list := <zip> (file-list, ast-list)
    ; cons := <parse-file; collect(?Constructor(_))> colorer-file
    ; <map(gen-docs-page(|meta-language, repo-clone, repo-name, project-path, file-ast-list, cons))> file-ast-list
    ; say(!"... done")

  // test-gen-docs-page: (_, _, _, path, project-path) -> None()
  // - for use as an action in the Spoofax menu
  // - the extension of the selected file determines the source language
  // - tests generating a webpage from the selected source file

  test-gen-docs-page: (_, _, _, path, project-path) -> None()
    with
      meta-language := <get-extension; try(?"stxtest"; !"stx")> path
    ; repo-clone := <local-path; dirname> project-path
    ; repo-name := <base-filename> repo-clone
    ; repo-path := <dirname> repo-clone
    ; meta-language-project-path := $[[repo-path]/[<meta-project-path> meta-language]]
    ; colorer-file :=
        <!$[[meta-language-project-path]/editor/Colorer-CF.esv]; file-exists 
         <+ !$[[meta-language-project-path]/editor/Colorer.esv]>
    ; say(!"Testing webpage generation ...")
    ; file-list := <current-language-source-files; filter(where(has-extension(|meta-language)))>
    ; ast-list := <map(analyzed-ast)> file-list
    ; file-ast-list := <zip> (file-list, ast-list)
    ; cons := <parse-file; collect(?Constructor(_))> colorer-file
    ; <gen-docs-page(|meta-language, repo-clone, repo-name, project-path, file-ast-list, cons)>
        (path, <lookup> ($[[project-path]/[path]], file-ast-list))
    ; say(!"... done")

rules // Webpage

  // gen-docs-page(|meta-language, repo-clone, repo-name, project-path, ast-list, cons): (file, ast) -> ()
  // - assumes that the project is at the top level of repo-clone
  // - assumes that the docs directory is a sibling of the project
  // - reads source text from the file
  // - generates an HTML div element with markup for the ast and any surrounding tokens
  // - embeds the HTML in the source text for a web page
  // - writes the web page source to the docs directory
    
  gen-docs-page(|meta-language, repo-clone, repo-name, project-path, ast-list, cons):
    (file, ast) -> ()
    with
    if <eq>(file, ".")
    then !()
    else
      path := <string-replace(|$[[project-path]/], "")> file
    ; filename := <base-filename> path
    ; project-name := <base-filename> project-path
    ; project-clone := <local-path> project-path
    ; github-repo := $[pdmosses/[repo-name]]
    ; github-link := <
        if is-substring(!"src-gen/") then !"" else
        !${:simple-github: [{github-repo}/{project-name}/{path}]}
        end > path
    ; target := $[[repo-clone]/docs/[project-name]/[path].md]
    ; say(!$[> [repo-name]/docs/[project-name]/[path].md])
    ; ins := <fopen> (path, "r")
    ; outs := <fopen> (target, "w")
    ; <fputs> (
        ${---
          title: {filename}
          hide:
            - toc
          ---
          
          # `{filename}`
          
          {github-link}
          
          [{github-repo}/{project-name}/{path}]: https://github.com/{github-repo}/blob/master/{project-name}/{path} "The source file on GitHub"
          
          }, outs)
    ; div-start := ${<div class="{meta-language}"><table class="highlighttable"><tbody><tr>}
    ; div-end :=   ${</tr></tbody></table></div>}
    ; td-start :=  ${<td class="linenos"><div class="linenodiv"><pre><span></span>}
    ; td-end :=    ${</pre></div></td>}
    ; <fputs> (<concat-strings> [div-start, td-start, <gen-linenos> path, td-end], outs)
    ; <fputs> (
        ${
          <td class="code"><pre><code>}, outs)
    ; <gen-node-markup(|ins, outs, repo-name, cons, ast-list)> (0, ast)
    ; gen-tokens-markup(|ins, outs)
    ; <fputs> (
        ${
          </code></pre></td>{div-end}
          
          <div id="modal">
            <div id="modal-content">
              <span id="modal-close">&times;</span>
              <h2 id="modal-h2"></h2>
              <p  id="modal-p"></p>
              <ul id="modal-ul"></ul>
            </div>
          </div>
          }, outs)
    ; <fclose> ins
    ; <fclose> outs
    ; !()
    end

rules // Line numbers

  // gen-linenos: path:string -> linenos:string
  // - linenos consists of the line numbers of all the lines in the file at path
  // - each line number is on a separate line, with no spaces

  gen-linenos: path -> <for(prefix-lineno | 1, <count-lines> path) ; reverse; lines> []
   
  prefix-lineno(|n): l -> [<int-to-string> n | l]
  
  count-lines = read-text-file ; get-lines; rtrim(?""); length
