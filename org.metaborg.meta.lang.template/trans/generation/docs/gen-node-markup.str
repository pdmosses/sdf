module generation/docs/gen-node-markup

imports

  generation/docs/gen-tokens-markup
  generation/docs/gen-origin-info
  generation/docs/name-binding
  
  libstratego-lib
  
  libspoofax/term/origin
  EditorService

rules // Nodes

  // gen-node-markup(|ins:Stream, outs:Stream, repo-name:String, cons:List(Constructor(String)), ast-list:List(AST)):
  //   (p:Int, node:AST) -> r:Int
  // - assumes that the text before position p (>= 0) in ins has already been marked up
  // - assumes that the source text of node starts at position q >= p
  // - matches and marks up all tokens between p and q, writing them to outs
  // - marks up ast, writing it to outs
  // - inserts HTML tags for definitions, references, and highlighting nodes in ast
  // - assumes that cons is a list of the constructors for highlighting 
  // - the result r is the position of the end of the ast text

  // gen-node-markup generates a HTML element from a reference node
  // - assumes that the name of a reference is a string
  // - when external definition, generates a span
  // - when some definitions in a single file, generates an anchor linking to the first
  // - when multi-file definitions, generates a button for a modal with a link to each definition
  // - always includes an id attribute
  // - guarantees that the id is unique on each web page by adding the origin line and column to the name

  gen-node-markup(|ins, outs, repo-name, cons, ast-list):
    (p, node) -> r
    where
      defs := <is-string; use-to-defs; sort-by-origin(|node)> node
    ; (line, column) := (<origin-line; inc> node, <origin-column; inc> node)
    ; id-attr := $[[node]_[line]_[column]]
    ; (q, r) := <origin-offset> node
    ; gen-tokens-markup(| ins, outs, <subti> (q, p))
    ; if <map(origin-file; is-substring(!"/file:/"))> defs
      then
        title := $[a reference to an external definition]
      ; <fputs> ($[<span id="[id-attr]" title="[title]">], outs)
      ; gen-copy(| ins, outs, <subti> (r, q)) // gen-tokens-markup(| ins, outs, <subti> (r, q))
      ; <fputs> ($[</span>], outs)
      else
        modal-data := <gen-modal-data> (node, defs)
      ; if [(url, [(line1, column1)|_])] := modal-data
        then
          title := $[a reference to a single-file definition]
        ; href := $[[url]#[node]_[line1]_[column1]]
        ; <fputs> ($[<a href="[href]" id="[id-attr]" title="[title]">], outs)
        ; gen-copy(| ins, outs, <subti> (r, q)) // gen-tokens-markup(| ins, outs, <subti> (r, q))
        ; <fputs> ($[</a>], outs)
        else
          title := $[a reference to a multi-file definition]
        ; data-urls := <map(url-modal-data(|node)); separate-by(|"; "); concat-strings> modal-data
        ; <fputs> ($[<button class="modal-open" id="[id-attr]" title="[title]" data-urls="[data-urls]">], outs)
        ; gen-copy(| ins, outs, <subti> (r, q)) // gen-tokens-markup(| ins, outs, <subti> (r, q))
        ; <fputs> ($[</button>], outs)
        end
      end

  // gen-node-markup generates a HTML element from a definition node
  // - assumes that the name of a definition is a string
  // - when no references, generates a span
  // - when one reference in a single file, generates an anchor linking to it
  // - when multi-file references, generates a button for a modal with a link to each reference
  // - always includes an id attribute
  // - guarantees that the id is unique on each web page by adding the origin line and column to the name

  gen-node-markup(|ins, outs, repo-name, cons, ast-list):
    (p, node) -> r
    where 
      refs := <is-string; def-to-uses(|ast-list); sort-by-origin(|node)> node
    ; (line, column) := (<origin-line; inc> node, <origin-column; inc> node)
    ; id-attr := $[[node]_[line]_[column]]
    ; (q, r) := <origin-offset> node
    ; gen-tokens-markup(| ins, outs, <subti> (q, p))
    ; if <eq> (refs, []) 
      then 
        title := $[a definition with no references]
      ; <fputs> ($[<span id="[id-attr]" title="[title]">], outs)
      ; gen-copy(| ins, outs, <subti> (r, q)) // gen-tokens-markup(| ins, outs, <subti> (r, q))
      ; <fputs> ($[</span>], outs)
      else
        modal-data := <gen-modal-data> (node, refs)
      ; if [(url, [(line1, column1)])] := modal-data
        then
          title := $[a definition with a single reference]
        ; href := $[[url]#[node]_[line1]_[column1]]
        ; <fputs> ($[<a href="[href]" id="[id-attr]" title="[title]">], outs)
        ; gen-copy(| ins, outs, <subti> (r, q)) // gen-tokens-markup(| ins, outs, <subti> (r, q))
        ; <fputs> ($[</a>], outs)
        else
          title := $[a definition with multiple references]
        ; data-urls := <map(url-modal-data(|node)); separate-by(|"; "); concat-strings> modal-data
        ; <fputs> ($[<button class="modal-open" id="[id-attr]" title="[title]" data-urls="[data-urls]">], outs)
        ; gen-copy(| ins, outs, <subti> (r, q)) // gen-tokens-markup(| ins, outs, <subti> (r, q))
        ; <fputs> ($[</button>], outs)
        end
      end
  
  // gen-node-markup copies other strings without markup

  gen-node-markup(|ins, outs, repo-name, cons, ast-list):
    (p, node) -> r
    where
      <is-string> node
    ; (q, r) := <origin-offset> node
    ; gen-tokens-markup(| ins, outs, <subti> (q, p))
    ; gen-copy(| ins, outs, <subti> (r, q))
  
  // gen-node-markup embeds a node to be highlighted in a <span> element with a class attribute
  // - takes the set of constructors for highlighted nodes from editor/Colorer.esv
  // - guarantees to mark up all branches of the node

  gen-node-markup(|ins, outs, repo-name, cons, ast-list):
    (p, node@f#(nodes)) -> r
    where 
      <elem> (Constructor(f), cons)
    ; (q, r) := <origin-offset> node
    ; gen-tokens-markup(| ins, outs, <subti> (q, p))
    ; <fputs> ($[<span class="cons_[f]">], outs)
    ; r' := <gen-node-markup-map(|ins, outs, repo-name, cons, ast-list)> (q, nodes)
    ; gen-tokens-markup(| ins, outs, <subti> (r, r'))
    ; <fputs> ($[</span>], outs)

  // gen-node-markup otherwise generates markup only for the branches of the node
  // - guarantees to mark up all branches of the node
  
  gen-node-markup(|ins, outs, repo-name, cons, ast-list):
    (p, f#(nodes)) -> <gen-node-markup-map(|ins, outs, repo-name, cons, ast-list)> (p, nodes)
  
  // gen-node-markup-map generates markup for each node in a list of nodes

  gen-node-markup-map(|ins, outs, repo-name, cons, ast-list):
    (p, [node | nodes]) -> r
    where 
      q := <gen-node-markup(|ins, outs, repo-name, cons, ast-list)> (p, node)
    ; r := <gen-node-markup-map(|ins, outs, repo-name, cons, ast-list)> (q, nodes)

  gen-node-markup-map(|ins, outs, repo-name, cons, ast-list):
    (p, []) -> p
